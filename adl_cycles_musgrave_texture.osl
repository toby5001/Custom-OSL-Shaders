// A generalization of cycles' node_musgrave_texture.osl, with minor changes to make it self-contained and work with Redshift
// adl_cycles_musgrave_texture.osl, adapted by Andrew Louda
// Modified: 2023-11-13 - Initial Release
// Copyright 2023 Andrew Louda. This file is licensed under the Apache 2.0 license.
// SPDX-License-Identifier: Apache-2.0

// All credit goes to the contributors to Blender and Cycles.
// This is essentially just a direct copy with dependencies built in and better interface for outside of cycles
// This should return the same results if given the same input coordinates as Cycles' inbuilt version,
// To allow for compatibility with Redshift, uses of the error() function have been removed


/* SPDX-License-Identifier: Apache-2.0
 * Copyright 2011-2022 Blender Foundation */

#include "vector2.h"
#include "vector4.h"

#define vector3 point

float safe_noise(float p)
{
  float f = noise("noise", p);
  if (isinf(f))
    return 0.5;
  return f;
}

float safe_noise(vector2 p)
{
  float f = noise("noise", p.x, p.y);
  if (isinf(f))
    return 0.5;
  return f;
}

float safe_noise(vector3 p)
{
  float f = noise("noise", p);
  if (isinf(f))
    return 0.5;
  return f;
}

float safe_noise(vector4 p)
{
  float f = noise("noise", vector3(p.x, p.y, p.z), p.w);
  if (isinf(f))
    return 0.5;
  return f;
}

float safe_snoise(float p)
{
  float f = noise("snoise", p);
  if (isinf(f))
    return 0.0;
  return f;
}

float safe_snoise(vector2 p)
{
  float f = noise("snoise", p.x, p.y);
  if (isinf(f))
    return 0.0;
  return f;
}

float safe_snoise(vector3 p)
{
  float f = noise("snoise", p);
  if (isinf(f))
    return 0.0;
  return f;
}

float safe_snoise(vector4 p)
{
  float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
  if (isinf(f))
    return 0.0;
  return f;
}




/* SPDX-License-Identifier: Apache-2.0
 * Copyright 2011-2022 Blender Foundation */

// #include "node_noise.h"
// #include "stdcycles.h"
// #include "vector2.h"
// #include "vector4.h"

#define vector3 point

/* 1D Musgrave fBm
 *
 * H: fractal increment parameter
 * lacunarity: gap between successive frequencies
 * octaves: number of frequencies in the fBm
 *
 * from "Texturing and Modelling: A procedural approach"
 */

float noise_musgrave_fBm_1d(float co, float H, float lacunarity, float octaves)
{
  float p = co;
  float value = 0.0;
  float pwr = 1.0;
  float pwHL = pow(lacunarity, -H);

  for (int i = 0; i < (int)octaves; i++) {
    value += safe_snoise(p) * pwr;
    pwr *= pwHL;
    p *= lacunarity;
  }

  float rmd = octaves - floor(octaves);
  if (rmd != 0.0) {
    value += rmd * safe_snoise(p) * pwr;
  }

  return value;
}

/* 1D Musgrave Multifractal
 *
 * H: highest fractal dimension
 * lacunarity: gap between successive frequencies
 * octaves: number of frequencies in the fBm
 */

float noise_musgrave_multi_fractal_1d(float co, float H, float lacunarity, float octaves)
{
  float p = co;
  float value = 1.0;
  float pwr = 1.0;
  float pwHL = pow(lacunarity, -H);

  for (int i = 0; i < (int)octaves; i++) {
    value *= (pwr * safe_snoise(p) + 1.0);
    pwr *= pwHL;
    p *= lacunarity;
  }

  float rmd = octaves - floor(octaves);
  if (rmd != 0.0) {
    value *= (rmd * pwr * safe_snoise(p) + 1.0); /* correct? */
  }

  return value;
}

/* 1D Musgrave Heterogeneous Terrain
 *
 * H: fractal dimension of the roughest area
 * lacunarity: gap between successive frequencies
 * octaves: number of frequencies in the fBm
 * offset: raises the terrain from `sea level'
 */

float noise_musgrave_hetero_terrain_1d(
    float co, float H, float lacunarity, float octaves, float offset)
{
  float p = co;
  float pwHL = pow(lacunarity, -H);
  float pwr = pwHL;

  /* first unscaled octave of function; later octaves are scaled */
  float value = offset + safe_snoise(p);
  p *= lacunarity;

  for (int i = 1; i < (int)octaves; i++) {
    float increment = (safe_snoise(p) + offset) * pwr * value;
    value += increment;
    pwr *= pwHL;
    p *= lacunarity;
  }

  float rmd = octaves - floor(octaves);
  if (rmd != 0.0) {
    float increment = (safe_snoise(p) + offset) * pwr * value;
    value += rmd * increment;
  }

  return value;
}

/* 1D Hybrid Additive/Multiplicative Multifractal Terrain
 *
 * H: fractal dimension of the roughest area
 * lacunarity: gap between successive frequencies
 * octaves: number of frequencies in the fBm
 * offset: raises the terrain from `sea level'
 */

float noise_musgrave_hybrid_multi_fractal_1d(
    float co, float H, float lacunarity, float octaves, float offset, float gain)
{
  float p = co;
  float pwHL = pow(lacunarity, -H);

  float pwr = 1.0;
  float value = 0.0;
  float weight = 1.0;

  for (int i = 0; (weight > 0.001) && (i < (int)octaves); i++) {
    if (weight > 1.0) {
      weight = 1.0;
    }

    float signal = (safe_snoise(p) + offset) * pwr;
    pwr *= pwHL;
    value += weight * signal;
    weight *= gain * signal;
    p *= lacunarity;
  }

  float rmd = octaves - floor(octaves);
  if ((rmd != 0.0) && (weight > 0.001)) {
    if (weight > 1.0) {
      weight = 1.0;
    }
    float signal = (safe_snoise(p) + offset) * pwr;
    value += rmd * weight * signal;
  }

  return value;
}

/* 1D Ridged Multifractal Terrain
 *
 * H: fractal dimension of the roughest area
 * lacunarity: gap between successive frequencies
 * octaves: number of frequencies in the fBm
 * offset: raises the terrain from `sea level'
 */

float noise_musgrave_ridged_multi_fractal_1d(
    float co, float H, float lacunarity, float octaves, float offset, float gain)
{
  float p = co;
  float pwHL = pow(lacunarity, -H);
  float pwr = pwHL;

  float signal = offset - fabs(safe_snoise(p));
  signal *= signal;
  float value = signal;
  float weight = 1.0;

  for (int i = 1; i < (int)octaves; i++) {
    p *= lacunarity;
    weight = clamp(signal * gain, 0.0, 1.0);
    signal = offset - fabs(safe_snoise(p));
    signal *= signal;
    signal *= weight;
    value += signal * pwr;
    pwr *= pwHL;
  }

  return value;
}

/* 2D Musgrave fBm
 *
 * H: fractal increment parameter
 * lacunarity: gap between successive frequencies
 * octaves: number of frequencies in the fBm
 *
 * from "Texturing and Modelling: A procedural approach"
 */

float noise_musgrave_fBm_2d(vector2 co, float H, float lacunarity, float octaves)
{
  vector2 p = co;
  float value = 0.0;
  float pwr = 1.0;
  float pwHL = pow(lacunarity, -H);

  for (int i = 0; i < (int)octaves; i++) {
    value += safe_snoise(p) * pwr;
    pwr *= pwHL;
    p *= lacunarity;
  }

  float rmd = octaves - floor(octaves);
  if (rmd != 0.0) {
    value += rmd * safe_snoise(p) * pwr;
  }

  return value;
}

/* 2D Musgrave Multifractal
 *
 * H: highest fractal dimension
 * lacunarity: gap between successive frequencies
 * octaves: number of frequencies in the fBm
 */

float noise_musgrave_multi_fractal_2d(vector2 co, float H, float lacunarity, float octaves)
{
  vector2 p = co;
  float value = 1.0;
  float pwr = 1.0;
  float pwHL = pow(lacunarity, -H);

  for (int i = 0; i < (int)octaves; i++) {
    value *= (pwr * safe_snoise(p) + 1.0);
    pwr *= pwHL;
    p *= lacunarity;
  }

  float rmd = octaves - floor(octaves);
  if (rmd != 0.0) {
    value *= (rmd * pwr * safe_snoise(p) + 1.0); /* correct? */
  }

  return value;
}

/* 2D Musgrave Heterogeneous Terrain
 *
 * H: fractal dimension of the roughest area
 * lacunarity: gap between successive frequencies
 * octaves: number of frequencies in the fBm
 * offset: raises the terrain from `sea level'
 */

float noise_musgrave_hetero_terrain_2d(
    vector2 co, float H, float lacunarity, float octaves, float offset)
{
  vector2 p = co;
  float pwHL = pow(lacunarity, -H);
  float pwr = pwHL;

  /* first unscaled octave of function; later octaves are scaled */
  float value = offset + safe_snoise(p);
  p *= lacunarity;

  for (int i = 1; i < (int)octaves; i++) {
    float increment = (safe_snoise(p) + offset) * pwr * value;
    value += increment;
    pwr *= pwHL;
    p *= lacunarity;
  }

  float rmd = octaves - floor(octaves);
  if (rmd != 0.0) {
    float increment = (safe_snoise(p) + offset) * pwr * value;
    value += rmd * increment;
  }

  return value;
}

/* 2D Hybrid Additive/Multiplicative Multifractal Terrain
 *
 * H: fractal dimension of the roughest area
 * lacunarity: gap between successive frequencies
 * octaves: number of frequencies in the fBm
 * offset: raises the terrain from `sea level'
 */

float noise_musgrave_hybrid_multi_fractal_2d(
    vector2 co, float H, float lacunarity, float octaves, float offset, float gain)
{
  vector2 p = co;
  float pwHL = pow(lacunarity, -H);

  float pwr = 1.0;
  float value = 0.0;
  float weight = 1.0;

  for (int i = 0; (weight > 0.001) && (i < (int)octaves); i++) {
    if (weight > 1.0) {
      weight = 1.0;
    }

    float signal = (safe_snoise(p) + offset) * pwr;
    pwr *= pwHL;
    value += weight * signal;
    weight *= gain * signal;
    p *= lacunarity;
  }

  float rmd = octaves - floor(octaves);
  if ((rmd != 0.0) && (weight > 0.001)) {
    if (weight > 1.0) {
      weight = 1.0;
    }
    float signal = (safe_snoise(p) + offset) * pwr;
    value += rmd * weight * signal;
  }

  return value;
}

/* 2D Ridged Multifractal Terrain
 *
 * H: fractal dimension of the roughest area
 * lacunarity: gap between successive frequencies
 * octaves: number of frequencies in the fBm
 * offset: raises the terrain from `sea level'
 */

float noise_musgrave_ridged_multi_fractal_2d(
    vector2 co, float H, float lacunarity, float octaves, float offset, float gain)
{
  vector2 p = co;
  float pwHL = pow(lacunarity, -H);
  float pwr = pwHL;

  float signal = offset - fabs(safe_snoise(p));
  signal *= signal;
  float value = signal;
  float weight = 1.0;

  for (int i = 1; i < (int)octaves; i++) {
    p *= lacunarity;
    weight = clamp(signal * gain, 0.0, 1.0);
    signal = offset - fabs(safe_snoise(p));
    signal *= signal;
    signal *= weight;
    value += signal * pwr;
    pwr *= pwHL;
  }

  return value;
}

/* 3D Musgrave fBm
 *
 * H: fractal increment parameter
 * lacunarity: gap between successive frequencies
 * octaves: number of frequencies in the fBm
 *
 * from "Texturing and Modelling: A procedural approach"
 */

float noise_musgrave_fBm_3d(vector3 co, float H, float lacunarity, float octaves)
{
  vector3 p = co;
  float value = 0.0;
  float pwr = 1.0;
  float pwHL = pow(lacunarity, -H);

  for (int i = 0; i < (int)octaves; i++) {
    value += safe_snoise(p) * pwr;
    pwr *= pwHL;
    p *= lacunarity;
  }

  float rmd = octaves - floor(octaves);
  if (rmd != 0.0) {
    value += rmd * safe_snoise(p) * pwr;
  }

  return value;
}

/* 3D Musgrave Multifractal
 *
 * H: highest fractal dimension
 * lacunarity: gap between successive frequencies
 * octaves: number of frequencies in the fBm
 */

float noise_musgrave_multi_fractal_3d(vector3 co, float H, float lacunarity, float octaves)
{
  vector3 p = co;
  float value = 1.0;
  float pwr = 1.0;
  float pwHL = pow(lacunarity, -H);

  for (int i = 0; i < (int)octaves; i++) {
    value *= (pwr * safe_snoise(p) + 1.0);
    pwr *= pwHL;
    p *= lacunarity;
  }

  float rmd = octaves - floor(octaves);
  if (rmd != 0.0) {
    value *= (rmd * pwr * safe_snoise(p) + 1.0); /* correct? */
  }

  return value;
}

/* 3D Musgrave Heterogeneous Terrain
 *
 * H: fractal dimension of the roughest area
 * lacunarity: gap between successive frequencies
 * octaves: number of frequencies in the fBm
 * offset: raises the terrain from `sea level'
 */

float noise_musgrave_hetero_terrain_3d(
    vector3 co, float H, float lacunarity, float octaves, float offset)
{
  vector3 p = co;
  float pwHL = pow(lacunarity, -H);
  float pwr = pwHL;

  /* first unscaled octave of function; later octaves are scaled */
  float value = offset + safe_snoise(p);
  p *= lacunarity;

  for (int i = 1; i < (int)octaves; i++) {
    float increment = (safe_snoise(p) + offset) * pwr * value;
    value += increment;
    pwr *= pwHL;
    p *= lacunarity;
  }

  float rmd = octaves - floor(octaves);
  if (rmd != 0.0) {
    float increment = (safe_snoise(p) + offset) * pwr * value;
    value += rmd * increment;
  }

  return value;
}

/* 3D Hybrid Additive/Multiplicative Multifractal Terrain
 *
 * H: fractal dimension of the roughest area
 * lacunarity: gap between successive frequencies
 * octaves: number of frequencies in the fBm
 * offset: raises the terrain from `sea level'
 */

float noise_musgrave_hybrid_multi_fractal_3d(
    vector3 co, float H, float lacunarity, float octaves, float offset, float gain)
{
  vector3 p = co;
  float pwHL = pow(lacunarity, -H);

  float pwr = 1.0;
  float value = 0.0;
  float weight = 1.0;

  for (int i = 0; (weight > 0.001) && (i < (int)octaves); i++) {
    if (weight > 1.0) {
      weight = 1.0;
    }

    float signal = (safe_snoise(p) + offset) * pwr;
    pwr *= pwHL;
    value += weight * signal;
    weight *= gain * signal;
    p *= lacunarity;
  }

  float rmd = octaves - floor(octaves);
  if ((rmd != 0.0) && (weight > 0.001)) {
    if (weight > 1.0) {
      weight = 1.0;
    }
    float signal = (safe_snoise(p) + offset) * pwr;
    value += rmd * weight * signal;
  }

  return value;
}

/* 3D Ridged Multifractal Terrain
 *
 * H: fractal dimension of the roughest area
 * lacunarity: gap between successive frequencies
 * octaves: number of frequencies in the fBm
 * offset: raises the terrain from `sea level'
 */

float noise_musgrave_ridged_multi_fractal_3d(
    vector3 co, float H, float lacunarity, float octaves, float offset, float gain)
{
  vector3 p = co;
  float pwHL = pow(lacunarity, -H);
  float pwr = pwHL;

  float signal = offset - fabs(safe_snoise(p));
  signal *= signal;
  float value = signal;
  float weight = 1.0;

  for (int i = 1; i < (int)octaves; i++) {
    p *= lacunarity;
    weight = clamp(signal * gain, 0.0, 1.0);
    signal = offset - fabs(safe_snoise(p));
    signal *= signal;
    signal *= weight;
    value += signal * pwr;
    pwr *= pwHL;
  }

  return value;
}

/* 4D Musgrave fBm
 *
 * H: fractal increment parameter
 * lacunarity: gap between successive frequencies
 * octaves: number of frequencies in the fBm
 *
 * from "Texturing and Modelling: A procedural approach"
 */

float noise_musgrave_fBm_4d(vector4 co, float H, float lacunarity, float octaves)
{
  vector4 p = co;
  float value = 0.0;
  float pwr = 1.0;
  float pwHL = pow(lacunarity, -H);

  for (int i = 0; i < (int)octaves; i++) {
    value += safe_snoise(p) * pwr;
    pwr *= pwHL;
    p *= lacunarity;
  }

  float rmd = octaves - floor(octaves);
  if (rmd != 0.0) {
    value += rmd * safe_snoise(p) * pwr;
  }

  return value;
}

/* 4D Musgrave Multifractal
 *
 * H: highest fractal dimension
 * lacunarity: gap between successive frequencies
 * octaves: number of frequencies in the fBm
 */

float noise_musgrave_multi_fractal_4d(vector4 co, float H, float lacunarity, float octaves)
{
  vector4 p = co;
  float value = 1.0;
  float pwr = 1.0;
  float pwHL = pow(lacunarity, -H);

  for (int i = 0; i < (int)octaves; i++) {
    value *= (pwr * safe_snoise(p) + 1.0);
    pwr *= pwHL;
    p *= lacunarity;
  }

  float rmd = octaves - floor(octaves);
  if (rmd != 0.0) {
    value *= (rmd * pwr * safe_snoise(p) + 1.0); /* correct? */
  }

  return value;
}

/* 4D Musgrave Heterogeneous Terrain
 *
 * H: fractal dimension of the roughest area
 * lacunarity: gap between successive frequencies
 * octaves: number of frequencies in the fBm
 * offset: raises the terrain from `sea level'
 */

float noise_musgrave_hetero_terrain_4d(
    vector4 co, float H, float lacunarity, float octaves, float offset)
{
  vector4 p = co;
  float pwHL = pow(lacunarity, -H);
  float pwr = pwHL;

  /* first unscaled octave of function; later octaves are scaled */
  float value = offset + safe_snoise(p);
  p *= lacunarity;

  for (int i = 1; i < (int)octaves; i++) {
    float increment = (safe_snoise(p) + offset) * pwr * value;
    value += increment;
    pwr *= pwHL;
    p *= lacunarity;
  }

  float rmd = octaves - floor(octaves);
  if (rmd != 0.0) {
    float increment = (safe_snoise(p) + offset) * pwr * value;
    value += rmd * increment;
  }

  return value;
}

/* 4D Hybrid Additive/Multiplicative Multifractal Terrain
 *
 * H: fractal dimension of the roughest area
 * lacunarity: gap between successive frequencies
 * octaves: number of frequencies in the fBm
 * offset: raises the terrain from `sea level'
 */

float noise_musgrave_hybrid_multi_fractal_4d(
    vector4 co, float H, float lacunarity, float octaves, float offset, float gain)
{
  vector4 p = co;
  float pwHL = pow(lacunarity, -H);

  float pwr = 1.0;
  float value = 0.0;
  float weight = 1.0;

  for (int i = 0; (weight > 0.001) && (i < (int)octaves); i++) {
    if (weight > 1.0) {
      weight = 1.0;
    }

    float signal = (safe_snoise(p) + offset) * pwr;
    pwr *= pwHL;
    value += weight * signal;
    weight *= gain * signal;
    p *= lacunarity;
  }

  float rmd = octaves - floor(octaves);
  if ((rmd != 0.0) && (weight > 0.001)) {
    if (weight > 1.0) {
      weight = 1.0;
    }
    float signal = (safe_snoise(p) + offset) * pwr;
    value += rmd * weight * signal;
  }

  return value;
}

/* 4D Ridged Multifractal Terrain
 *
 * H: fractal dimension of the roughest area
 * lacunarity: gap between successive frequencies
 * octaves: number of frequencies in the fBm
 * offset: raises the terrain from `sea level'
 */

float noise_musgrave_ridged_multi_fractal_4d(
    vector4 co, float H, float lacunarity, float octaves, float offset, float gain)
{
  vector4 p = co;
  float pwHL = pow(lacunarity, -H);
  float pwr = pwHL;

  float signal = offset - fabs(safe_snoise(p));
  signal *= signal;
  float value = signal;
  float weight = 1.0;

  for (int i = 1; i < (int)octaves; i++) {
    p *= lacunarity;
    weight = clamp(signal * gain, 0.0, 1.0);
    signal = offset - fabs(safe_snoise(p));
    signal *= signal;
    signal *= weight;
    value += signal * pwr;
    pwr *= pwHL;
  }

  return value;
}

shader node_musgrave_texture(
    
    // Coordinates
    point coordVector = P
    [[  string label = "Coordinates",
        string page = "Input Coordinates" ]],
    float scaleGlobal = 1.0
    [[  string label = "Overall Scale",
        string page = "Input Coordinates",
        float slidermin = 0, 
        float slidermax = 10 ]],
    vector scale = 1.0
    [[  string label = "Scale",
        string page = "Input Coordinates"]],
    float W = 0.0
    [[  string label = "Time",
        string page = "Input Coordinates",
        float slidermin = 0, 
        float slidermax = 10 ]],
        
    // int use_mapping = 0,
    // matrix mapping = matrix(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    int musgrave_type = 0
    [[  string label = "Musgrave Type",
        string page = "Noise Parameters",
        string widget = "mapper", 
        string options = "fBM:0|Multifractal:1|Hybrid Multifractal:2|Ridged Multifractal:3|Hetero Terrain:4" ]],
    int dimensions = 3
    [[  string label = "Dimensions",
        string page = "Noise Parameters",
        string widget = "mapper", 
        string options = "1D:1|2D:2|3D:3|4D:4" ]],
    float Octaves = 5.0
    [[  string page = "Noise Parameters",
        float min = 0, 
        float max = 15 ]],
    float Dimension = 0.5
    [[  string page = "Noise Parameters",
        float slidermin = 0, 
        float slidermax = 10 ]],
    float Lacunarity = 2.0
    [[  string page = "Noise Parameters",
        float slidermin = 1, 
        float slidermax = 8 ]],
    float Offset = 0.0
    [[  string page = "Noise Parameters",
        float slidermin = 0, 
        float slidermax = 1 ]],
    float Gain = 10.0
    [[  string page = "Noise Parameters",
        float slidermin = 0, 
        float slidermax = 100 ]],

    // Outputs
    output float Fac = 0.0)
{
    float dimension = max(Dimension, 1e-5);
    float octaves = clamp(Octaves, 0.0, 15.0);
    float lacunarity = max(Lacunarity, 1e-5);

    vector3 s = coordVector;

    // if (use_mapping) s = transform(mapping, s);

    if (dimensions == 1) {
        float p = W * scaleGlobal;
        if (musgrave_type == 1) {
            Fac = noise_musgrave_multi_fractal_1d(p, dimension, lacunarity, octaves);
        }
        else if (musgrave_type == 0) {
            Fac = noise_musgrave_fBm_1d(p, dimension, lacunarity, octaves);
        }
        else if (musgrave_type == 2) {
            Fac = noise_musgrave_hybrid_multi_fractal_1d(
                p, dimension, lacunarity, octaves, Offset, Gain);
        }
        else if (musgrave_type == 3) {
            Fac = noise_musgrave_ridged_multi_fractal_1d(
                p, dimension, lacunarity, octaves, Offset, Gain);
        }
        else if (musgrave_type == 4) {
            Fac = noise_musgrave_hetero_terrain_1d(p, dimension, lacunarity, octaves, Offset);
        }
        else {
            Fac = 0.0;
        }
    }

    else if (dimensions == 2) {
        vector2 p = vector2(s[0], s[1]) * scaleGlobal;
        if (musgrave_type == 1) {
            Fac = noise_musgrave_multi_fractal_2d(p, dimension, lacunarity, octaves);
        }
        else if (musgrave_type == 0) {
            Fac = noise_musgrave_fBm_2d(p, dimension, lacunarity, octaves);
        }
        else if (musgrave_type == 2) {
            Fac = noise_musgrave_hybrid_multi_fractal_2d(
                p, dimension, lacunarity, octaves, Offset, Gain);
        }
        else if (musgrave_type == 3) {
            Fac = noise_musgrave_ridged_multi_fractal_2d(
                p, dimension, lacunarity, octaves, Offset, Gain);
        }
        else if (musgrave_type == 4) {
            Fac = noise_musgrave_hetero_terrain_2d(p, dimension, lacunarity, octaves, Offset);
        }
        else {
            Fac = 0.0;
        }
    }

    else if (dimensions == 3) {
        vector3 p = s * scaleGlobal;
        if (musgrave_type == 1) {
            Fac = noise_musgrave_multi_fractal_3d(p, dimension, lacunarity, octaves);
        }
        else if (musgrave_type == 0) {
            Fac = noise_musgrave_fBm_3d(p, dimension, lacunarity, octaves);
        }
        else if (musgrave_type == 2) {
            Fac = noise_musgrave_hybrid_multi_fractal_3d(
                p, dimension, lacunarity, octaves, Offset, Gain);
        }
        else if (musgrave_type == 3) {
            Fac = noise_musgrave_ridged_multi_fractal_3d(
                p, dimension, lacunarity, octaves, Offset, Gain);
        }
        else if (musgrave_type == 4) {
            Fac = noise_musgrave_hetero_terrain_3d(p, dimension, lacunarity, octaves, Offset);
        }
        else {
            Fac = 0.0;
        }
    }

    else if (dimensions == 4) {
        vector4 p = vector4(s[0], s[1], s[2], W) * scaleGlobal;
        if (musgrave_type == 1) {
            Fac = noise_musgrave_multi_fractal_4d(p, dimension, lacunarity, octaves);
        }
        else if (musgrave_type == 0) {
            Fac = noise_musgrave_fBm_4d(p, dimension, lacunarity, octaves);
        }
        else if (musgrave_type == 2) {
            Fac = noise_musgrave_hybrid_multi_fractal_4d(
                p, dimension, lacunarity, octaves, Offset, Gain);
        }
        else if (musgrave_type == 3) {
            Fac = noise_musgrave_ridged_multi_fractal_4d(
                p, dimension, lacunarity, octaves, Offset, Gain);
        }
        else if (musgrave_type == 4) {
            Fac = noise_musgrave_hetero_terrain_4d(p, dimension, lacunarity, octaves, Offset);
        }
        else {
            Fac = 0.0;
        }
    }

    else {
        Fac = 0.0;
    }
}
